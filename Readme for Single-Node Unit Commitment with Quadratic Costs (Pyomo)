# This is for unit_commiment_MIQP.py

# Single-Node Unit Commitment with Quadratic Costs (Pyomo)

## Overview

This project implements a single-node Unit Commitment (UC) optimization model using Python and the Pyomo modeling library. The goal is to determine the most cost-effective schedule for turning thermal power generating units on/off and setting their generation levels to meet a system-wide electricity demand over a defined time horizon. This model is formulated as a Mixed-Integer Quadratic Program (MIQP).

The current implementation uses a small example dataset (3 generators, 10 time periods) for demonstration and to manage solver limitations with size-restricted licenses.

#Key Model Features

The model incorporates essential aspects of unit commitment:

1.  Objective Function:
    *   Minimizes the total operational cost, which includes:
        *   Startup Costs: A fixed cost incurred each time a unit is started.
        *   No-Load Costs: The cost of keeping a unit online, even if it's producing no power.
        *   Generation Costs: A quadratic cost function (`a*g + b*g^2`) representing the variable fuel cost based on the amount of power (`g`) generated.

2.  Generator Operational Constraints
    *   **On/Off Status Logic:** Uses binary variables (`z`, `y`, `x`) to track if a unit is on/off (`z`), starting up (`y`), or shutting down (`x`) in each time period. Ensures a unit cannot be started and shut down simultaneously.
    *   **Minimum Up-Time:** Once a unit is started, it must remain online for a specified minimum number of consecutive time periods.
    *   **Minimum Down-Time:** After a unit is shut down, it must remain offline for a specified minimum duration.
    *   **Generation Limits (Pmin/Pmax):** When a unit is online, its power output must be between its minimum (`Pmin`) and maximum (`Pmax`) operating levels. If off, generation is zero.
    *   **Ramp Rate Limits:** Limits how quickly a generator can increase (ramp-up) or decrease (ramp-down) its power output from one period to the next. The current formulation (`g[i,t] - g[i,t-1] <= RampUpRate[i]`) effectively handles on/off transitions due to the Pmin/Pmax constraints.
    *   **Initial Conditions:** The model correctly handles the state of each generator (on/off status, time in that state, and generation level) at the beginning of the planning horizon.

3.  **System-Wide Constraint:**
    *   **Demand Balance:** The total power generated by all online units in each time period must be greater than or equal to the total system demand for that period.

#Implementation Details

*   **Language:** Python 3.x
*   **Modeling Tool:** Pyomo
*   **Solver:** Designed for MIQP solvers like Gurobi 
*   **Data:** Generator parameters and demand profiles are defined as Python dictionaries and lists within the script.

## How to Run

1.  **Prerequisites:**
    *   Python 3.x installed.
    *   Pyomo library: `pip install pyomo`
    *   A compatible MIQP solver (e.g., Gurobi with `gurobipy`. Ensure the solver is correctly installed and licensed (if applicable).

2.  **Configure Data (Optional):**
    *   Modify `T` (number of time periods), `generators_data`, and `demand_data` at the beginning of the script to experiment with different scenarios.

3.. **Execute:**
    
    python script_name.py . here my file name is unit_commiment_MIQP.py
   

4.  **Output:**
    *   The script will print the Gurobi solver log.
    *   If an optimal solution is found, it will display the total cost, and the schedule for unit status (on/off, startup, shutdown), generation levels, and a comparison of total generation against demand.
    *   `model.pprint()` at the end will display the full algebraic structure of the Pyomo model.


